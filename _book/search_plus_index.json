{"./":{"url":"./","title":"开始","keywords":"","body":"开始 在这一部分，主要介绍与课程学习紧密相关，但又不属于其知识体系的内容。 如何学习编程 命令行 系统包管理工具 Git简明教程 Sublime Text编辑器的使用 Visual Studio Code编辑器的使用 虚拟机 Linux操作系统 网站服务器搭建 By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"Howtolearn.html":{"url":"Howtolearn.html","title":"如何学习编程","keywords":"","body":"如何学习编程 You can code. They cannot. That is pretty damn cool. -- Zed A. Shaw in《Learn Python The Hard Way》 如今编程成为了一个越来越重要的能力：作为设计师，懂一些编程可能会帮你更好地理解自己的工作内容；作为创业者，技术创始人的身份则会让你的很多工作显得更容易；作为研究者，学会编程能让你按照自己的意图获取数据和处理数据。无论哪个行业，都面临着如何同互联网相融合的机遇和挑战。具备一定的编程能力，无疑会提高在互联网时代的竞争实力。 刚开始学习编程的新手，常面临这样的问题： 面对各种学习资料，不知道从哪里开始； 好不容易入门后，发现需要学习的内容越来越多、越来越难，陡峭的学习曲线使人望而却步； 经过一段学习，已经具有一定的基础知识，但是不知道如何进行一个真正的项目，缺乏继续深入学习的动机。 幸运的是，我们现在处于互联网蓬勃发展的时代，初学者面临的这些问题，已经有诸多的解决方案，在这一章节中，我们一起了解前人们的经验和教训，从而提高学习效率。 调整心态 首先要明确一点，编程不是一件轻轻松松就能学会的技能。虽然能在书店中看到大量类似 《21天学通XXX》的书籍，但一旦你开始学习的时候，就会有这样的体验：所谓的捷径是不存在的，尤其是在编程领域，只要有一处错误，有一处你没有真正掌握的知识点，你就会卡在哪里，只有排除错误后，你才能继续下一个任务。一句话：学习编程意味着你将需要投入大量的时间和精力。 在学习编程的过程中，一些人容易放弃的原因主要有三点： 一是没有目标，不知道掌握了编程技能后能解决什么具体问题。 二是乏味，在学习编程语言的基础知识（如语法规则、编程模式）时提不起兴趣。 三是觉得难，有些知识点的确不是一下就能理解，尝试后知难而退。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，那些曾经困惑你的问题可能会自然显现。 如何解决这些学习过程中遇到的困惑呢？根据个人的经验和别人的总结，提出如下建议： 明确目标 在你学习编程之前思考一下你的目标，你想要用这门语言写什么？网站？游戏？手机APP？还是想自动完成一些乏味重复的任务？亦或你只是想找个好工作。当然，所有的这些都是有价值的目标，这些目标都是你学习的驱动力，没有驱动力，很有可能在略显枯燥的漫长学习之旅中半途而废。 行为科学家认为，人的驱动力分为三种： 第一驱动力是生物性需求，即对食物、性欲等等的需求； 第二驱动力则来自外在动机，做出特定行为时环境会带来的奖励或惩罚； 第三驱动力来自于内在动机，我们有“发现新奇事物、进行挑战、拓展并施展才能以及探索和学习的内在倾向”[2]。 第三种驱动力比另外两种更脆弱，它只有在合适的环境中才能存在。人们发现，以乐为本的内在动机，也就是感受到自己的创造力是最强大的动机，才是真正能驱动人们进行自我管理、不断前进的动力。Linux操作系统的创始人李纳斯·特沃兹在自传《乐者为王》中也谈到类似的观点：很多顶尖的程序员写程序的目的，并不是为了赚钱或者得到公众的奉承，而是觉得写程序本身很有趣。[3] 保持驱动力，还可使用“心理对照”(metal contrasting)的技巧，此方法将你现在的状态和你期望达到的状态作对比。心理对照能产生巨大效果的原因，就在于你在拿想要的未来与当下的状态或曾经的状态进行对比，在生活和工作空间中摆放一些能让你联想到未来的图片，它可以为你增加动力。 保持兴趣 赫伯特·亚历山大·西蒙Simon认为，人是有限理性的动物，体现在学习中，就是情境理性。即“在哪里用，就在哪里学”，人的学习受到情景制约或者促进。你要学习的东西将实际应用在什么情境中，那么你就应该在什么样的情境中学习这些东西。比如，你要学习讨价还价的技巧，就应该在实际的销售场合学习，因为这一技巧最终是用在销售场合的。 了解到这些行为科学的研究成果后，我们应该将编程和自己或者他人的实际需求结合起来进行学习和实践，也就是说，我们应该利用计算机解决实际的问题，这样才能保持足够的驱动力。当然，人在不同阶段的需求会有变化。比如我刚毕业时，刚接触互联网，觉得很神奇，就利用业余时间建立了一个班级网站，方便同学之间联系。后来，在复习考研的过程中，发现很多背单词软件都满足不了自己的需求，又在复习的间隙，写了一个背单词的工具。 总之，编程是连接理论与实践的纽带，是计算机科学与计算机应用技术相交融的领域。正确的编程学习方法应该是：通过自上而下的探索与项目实践，获得编程直觉与推动力；从自下向上的打基础过程中，获得最重要的通用方法并巩固编程思想的理解。 如何学习 细嚼慢咽 学习新知识时，由于陌生的概念较多，很想快速掌握、贪多，我自己也经常这样，所以经常会在不同的资料之间来回切换。我一但进入这个状态，效率就很低，只到我收回贪心，慢慢地，一个一个地解决一些细小的问题，才能实质性地推进学习进度。 不断地转移注意力，也就意味着你脑中的新观点、新概念没有机会互相产生联系，一心多用，会迅速疲劳，产生挫折感，因为每一次微不足道的注意力转移都消耗大脑能量，让你事倍功半。 建议使用番茄工作法“poromodo”，在一个相对短暂的时间里，比如25分钟内，专注于一项任务，并且将注意力放在过程而非结果上（如不要关注我快要完成任务了吗？）。专注过程的你不会再某一项任务上举步不前，而是进入一种自动状态，并不在乎是否必须完成任务。 快速迭代 迭代是一个重复反馈过程的活动，每一次迭代的结果都会作为下一次迭代的初始值，从而不断逼近目标或结果。迭代的实质思想是每次循环不求完美，但求不断发现新问题，迅速求解，获取和积累新知识。具体到编程学习中，就是先快速了解一门编程语言的基本语法，之后就开始用这门语言解决实际问题，做出一个能用的版本，然后再不断优化。 尽快用学习的编程工具作出实际项目，还有个好处，那就是能在学习的过程中，不断感受到自己的创造力，按照之前提到的理论，这种内在动机，也就是因一件事很有趣、很有挑战性、很令人着迷而去做的驱动力，对于从事创造性工作的人（艺术家、科学家、发明家和在校学生等等）至关重要。 内化输出 在学习的过程中，做好笔记。对不太熟悉的知识点，结合项目经验，简单总结后发布在博客或者Github、Oschina等等版本管理站点上。当知识点能形成知识网络时，利用思维导图、概念图等工具将知识点之间的逻辑关系表述出来。这样做，一方面能在日积月累中熟悉知识，方便日后查询温习；另一方面通过内容的创作，能有效提高学习的成就感，进而增强学习兴趣，进入学习的正向循环。 做笔记的时候，最好不要粘贴、复制网络现成的资料，具体可参考理查德·费曼Freeman提出的以下步骤：[4] 选择你想要学习理解的概念； 假设你正在给别人讲解这个概念，写出这个概念的解释。当你试着给别人讲解这个概念时，可促进对这个概念的深入理解，也能及时发现对这个概念的模糊之处； 如果你卡在某个地方，回头查阅资料重新理解概念，只到你能达到上一步的要求； 简化你的表述。使用你自己的语言，而不是资料上的原话，简洁清晰地表述概念。如果你的解释比较混乱，那就意味着你可能并没有真正理解这个概念。 善用网络 与其它领域的学习不同，学习编程有着高质量的网络资源，从官方文档到各种教程，从入门级别的练手代码到行业顶尖人员的作品，甚至开发工作中常见错误的解决办法，都可以从网络中获取。互联网本身就是一个友善的集体智慧创作群体的成果。我们应利用互联网，积极参与人类智慧的集体进化，这是最简单的让自己变得更智慧的方法。 在线教学网站。网络上有许多高质量的教学网站，如慕课网、Code.org等等，这些网站积累了大量优质教学资源。 官方网站。不管何种语言或者框架、库之类，其官方网站应该是学习者解决疑惑的首选； 专业问答网站。遇到问题时，去Stack Overflow、SegmentFault.com等专业编程问答网站查找或者提问； 代码托管网站。在开始项目前，最好到Github等代码托管网站查看有无相近的项目。 利用Google等搜索引擎。 最后，来段视频鼓励下大家：大多数学校不会教的东西。 本章节的写作，受到知乎用户萧井陌《编程入门指南》[5]的启发，在此致谢。 扩展阅读资料 [美]芭芭拉·奥克利.学习之道.北京:机械工业出版社, 2018. [美]凯利·麦格尼格尔.自控力.北京:文化发展出版社有限公司,2017. [美]丹尼尔·平克.驱动力.杭州:浙江人民出版社,2018. Simon. 赫伯特·亚历山大·西蒙（英语：Herbert Alexander Simon，1916年6月15日－2001年2月9日），美国著名学者，计算机科学家和心理学家，研究领域涉及认知心理学、计算机科学、公共行政、经济学、管理学和科学哲学等多个方向。1975年图灵奖得主，1978年，获得诺贝尔经济学奖。 ↩ Freeman. 理查德·费曼（1918年5月11日－1988年2月15日），美国物理学家。1965年诺贝尔物理奖得主。 ↩ By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"commandline.html":{"url":"commandline.html","title":"命令行","keywords":"","body":"命令行 简单地说，命令行是一个将接收到的键盘键入命令提交给操作系统执行的程序。在早期，命令行是人们和计算机进行交互的唯一方式，但现在，人们已经习惯使用图形界面（GUI)，但在软件开发过程中，却又需要掌握必要的命令行知识。 命令行工具 windows命令行工具 Windows系统自带命令行工具cmd和powershell，但其界面过于简陋，且功能有限。开源项目cmder解决了在windows系统中使用命令行工具的一些痛点，建议使用，其官方地址为：http://cmder.net/，下载完全版，即可在windows系统中免安装使用和Linux、Macos类似的命令行工具。 MacOS命令行工具 在MacOS中自带终端（terminal）作为命令行工具，还可使用包管理工具Homebrew安装其他命令行工具，不同终端的用法基本保持一致。 常用命令 man man 命令提供详细的参考手册，如想知道ls命令的详细用法，即可在命令行中执行如下指令: man ls 按q键退出man命令显示的手册信息。 当我们想要详细了解某个命令的用法时，可使用man命令。 cd cd命令改变当前目录位置，用法比较灵活，常用方法如下： 命令 效果 cd 返回默认目录 cd .. 返回上一级目录 cd - 返回之前的目录 cd xxx 进入xxx目录 cd ph* 进入第一个ph开头的目录 pwd pwd 显示当前目录信息。 mkdir mkdir 用来创建目录，为mkdir命令增加-p选项，可以逐级创建所需要的目录。 rmdir rmdir 用来删除目录，删除目录时，目录里面不能包含任何文件或目录。 cp cp 复制文件或文件夹。常用参数如下： 命令 效果 cp -Rf source target 复制源目录及文件到目标目录及文件 ls ls 列出目录及文件信息，常见用法如下： 命令 效果 ls -l 显示当前目录及文件的详细信息 ls -lt 显示当前目录及文件的详细信息，并按照时间倒序显示 ls -ltr 显示当前目录及文件的详细信息，并按照时间顺序显示 ls -lS 显示当前目录及文件的详细信息，并按照文件大小排序显示 通过 ls -l 列出的文件，每一行的开头字符表示文件类型： 前缀 描述 - 普通文件 b 块设备文件 c 字符设备文件 d 目录文件 | 软连接，相当于windows中的快捷方式 p 具名管道 s 用于进程间通讯的套接字 mv mv 移动目录与文件，这个命令还可以用来重命名文件。 rm rm 删除文件或目录，常见用法如下： 命令 效果 rm -R xxx 删除xxx目录及其子目录中的内容 rm -f xxx 删除xxx目录或文件，并且没有提示信息 clear clear 清除当前终端显示内容，亦可用快捷键ctrl+k代替。 cat cat 显示文件内容 wc wc 用来统计文件的行数、单词数和字符数。 touch touch 创建文件 vi vi 查看编辑文件内容，属于运行于命令行中的编辑器。 命令行操作 重复命令 按上下键可调用之前执行过的命令，从而节省键入时间。 强行退出 使用快捷键ctrl+c可以强行退出正在执行的命令。 扩展阅读资料 http://linuxcommand.org/index.php By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"pm.html":{"url":"pm.html","title":"系统包管理工具","keywords":"","body":"系统包管理工具 为什么要用系统包管理工具 通常情况下，我们使用系统默认的方式，如Windows系统中，使用特定的安装程序，Mac中，可使用安装程序或直接拖动到应用程序文件夹即可。除此之外，我们还可以使用系统包管理工具进行软件的安装、升级、卸载。 使用系统包管理工具管理软件有什么好处呢？ 通过系统包管理工具安装我们所需软件的时候，包管理工具会为用户自动去下载软件所依赖的其它的东西。 使用包管理工具，可以很方便的去管理软件，比如去升级还有删除它们。 简化软件设置的步骤，方便用户使用。 所有安装的软件都来源于软件的官方网站，增加安全性。 Windows包管理工具Chocolatey 安装 打开https://Chocolatey.org官方网站，复制安装脚本，使用管理员身份启动PowerShell或者cmd，按照官网步骤执行脚本，即可完成安装。 基本用法 用法 作用 choco install xxx 安装xxx软件 choco uninstall xxx 卸载xxx软件 choco upgrade xxx 更新xxx软件 choco search xxx 搜索xxx软件 Mac包管理工具Homebrew Homebrew是一款自由及开放源代码的软件包管理系统，用以简化Mac OS X系统上的软件安装过程， 使用 Homebrew 安装 Apple 没有预装但你需要的东西。最初由马克斯·霍威尔（Max Howell）写成，因其可扩展性得到了一致好评。 在Mac中安装软件时，优先考虑使用Homebrew进行安装和管理。 安装 在其官方网站https://brew.sh/index_zh-cn复制安装脚本，然后在终端中执行脚本即可。Homebrew 不会将文件安装到它本身目录之外，所以您可将 Homebrew 安装到任意位置。 安装之后运行： brew update brew doctor 排除检查出的错误及警告信息，确保brew正确安装。 之后，添加Homebrew的路径到终端~/.bash_profile： vi ~/.bash.profile export PATH=\"/usr/local/bin:$PATH\" 基本用法 用法 作用 brew install xxx 安装xxx软件 brew uninstall xxx 卸载xxx软件 brew upgrade xxx 更新xxx软件 brew search xxx 搜索xxx软件 安装cask扩展 使用brew方式安装的大都是命令行界面的工具，如果需要使用Homebrew管理图形界面软件，则需要安装cask扩展： brew tap caskroom/cask 这样，用户就可以使用命令行方式安装图形界面软件，例如： brew cask install google-chrome 常用软件 brew install node brew install curl brew install tree brew install openssl brew install python By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"git.html":{"url":"git.html","title":"Git简明教程","keywords":"","body":"Git简明教程 Always use source code control.---Andrew Hunt 程序员修炼之道 本教程的首要目的，是使读者能用Git这个最流行的分布式版本控制系统管理自己的项目。本教程的另外一个目的，是让选修课程的同学能通过Git工具轻松获取课程的相关文件（代码、教案等）。 本教程并不能使你成为Git工具的专家，很多高级命令并不涉及，如果想进一步学习，请阅读《Pro Git》[1]。 Git简介 什么是版本控制 什么是版本控制？我为什么要关心它呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。在本书所展示的例子中，我们仅对保存着软件源代码的文本文件作版本控制管理，但实际上，你可以对任何类型的文件进行版本控制。 如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴望拥有的功能）。采用版本控制系统（VCS）是个明智的选择。有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态。你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。 使用版本控制系统通常还意味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。但额外增加的工作量却微乎其微。 三种类型的版本控制系统 本地版本控制系统 为了解决上面提到的问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。 其中最流行的一种叫做 rcs，现今许多计算机系统上都还看得到它的踪影。甚至在流行的 Mac OS X 系统上安装了开发者工具包之后，也可以使用 rcs 命令。它的工作原理基本上就是保存并管理文件补丁（patch）。文件补丁是一种特定格式的文本文件，记录着对应文件修订前后的内容变化。所以，根据每次修订后的补丁，rcs 可以通过不断打补丁，计算出各个版本的文件内容。 集中化的版本控制系统 接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？于是，集中化的版本控制系统（ Centralized Version Control Systems，简称 CVCS ）应运而生。这类系统，诸如 CVS，Subversion 以及 Perforce 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。多年以来，这已成为版本控制系统的标准做法。 事分两面，有好有坏。这么做最显而易见的缺点是中央服务器的单点故障。如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。要是中央服务器的磁盘发生故障，碰巧没做备份，或者备份不够及时，就会有丢失数据的风险。最坏的情况是彻底丢失整个项目的所有历史更改记录，而被客户端偶然提取出来的保存在本地的某些快照数据就成了恢复数据的希望。但这样的话依然是个问题，你不能保证所有的数据都已经有人事先完整提取出来过。本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。 分布式版本控制系统 于是分布式版本控制系统（ Distributed Version Control System，简称 DVCS ）面世了。在这类系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份。 Git简史 同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。到 2002 年，整个项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。 到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统制订了若干目标： 速度 简单的设计 对非线性开发模式的强力支持（允许上千个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量） 于是Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git。一个月之内，Linux系统的源码已经由Git管理了！什么是大牛？大家可以体会一下。[7] 自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理系统，可以应付各种复杂的项目开发需求。 Git 版本管理还有一点特别需要说明，就是它的分布式设计非常巧妙和高效，每一个安装了Git的计算机，既是服务端，又是客户端；既能在联网情况下使用，又能在断网的情况使用。 Git迅速成为最流行的分布式版本控制系统，尤其是2008年，GitHub网站上线了，它为开源项目免费提供Git存储，无数开源项目开始迁移至GitHub，包括Linux51，jQuery，PHP，Ruby等等。 历史就是这么偶然，如果不是当年BitMover公司威胁Linux社区，可能现在我们就没有免费而超级好用的Git了。 安装Git Mac OS 最近的版本中，已经内置了git工具，无需安装。 Windows 上安装 Git 非常简单，可以到 GitHub 的 msysGit 项目下载 安装文件。完成安装之后，就可以使用命令行的 Git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。此外，windows用户还可以安装cmder，cmder内置了git，建议使用cmder，更加接近于终端的体验。 用Git获取代码 获取已有项目的内容，分为两种情况，即首次获取和更新数据。 首次获取代码 第一次获取已有项目数据的并不复杂，首先在想要保存项目代码的文件夹上按右键，选择Git Bash，进入Git命令行。然后在命令行中执行以下命令，即可获得托管在远程网站中的项目文件（包括代码和版本仓库），如： git clone https://git.oschina.net/yangjh/LearningPHP.git 其中第二个参数https://git.oschina.net/yangjh/LearningPHP.git就是公布在托管网站中的项目地址。上述命令执行完后，用户将得到项目文件。 获取远程仓库的更新代码 在完成了对项目仓库的首次克隆后，想要获取项目的最新代码，只需在Git Bash命令行中执行如下操作： git pull 获取远程仓库的特定分支 git clone -b [remote repository address] 主要就是在clone的时候，后面添加branch的信息。如克隆远程仓库https://git.coding.net/adamyang/blog.git中的coding-pages分支： git clone -b coding-pages https://git.coding.net/adamyang/blog.git 用Git管理自己的项目代码 设置Git 使用 Git 工作之前，我们需要做个一次性的配置，这样Git就能跟踪到谁做了修改： git config --global user.name \"your_username\" git config --global user.email \"your_email@domain.com\" 还需要设定推送（push）的默认值： git config --global push.default simple 首次建立Git仓库 使用Git管理自己的项目代码，也分为两种情况，首次建立仓库和提交更新内容。 初始化本地项目。在相应项目的文件夹上按右键，选择Git Init here。或者进入Git Bash命令行中执行 git init 在项目文件夹上按右键，选择Git add all files now，将文件夹中的所有文件添加到本地仓库中。或者进入Git Bash命令行中执行 git add . 在项目文件夹上按右键，选择Git commit tool，在随后弹出的对话框中输入更新说明，提交。或者进入Git Bash命令行中执行 git commit -m \".....更新说明\" 如果想对本地仓库建立远程的镜像，即将本地仓库托管到github之类的站点，应先到此类站点注册帐号，建立远程仓库，然后执行如下命令建立本地仓库和远程仓库的对应关系： git add remote origin https://仓库地址 推送本地仓库数据到远程仓库，执行如下命令： git push -u origin master 然后输入用户名和密码即可完成推送。 提交更新内容 完成上述操作后，以后的工作流程就更简洁了： 编写或者修改代码，保存文件。 添加更新文件到本地仓库，选择Git add all files now即可。或者进入Git Bash命令行中执行git add . 选择Git commit tool为这些更新添加说明注释。或者进入Git Bash命令行中执行git commit -m \".....更新说明\" 执行Git push将本地仓库同步到远程仓库。 至此，我们已经能用Git工具来管理和追踪项目的变化了。 使用GitHub Pages建立个人站点 GitHub 不仅能托管代码，还可以通过GitHub Pages工具免费建立静态站点，非常适合前端开发人员学习、展示作品。具体步骤如下： 在Github站点注册帐号，邮箱验证激活。 创建仓库。在GitHub注册登陆后，创建以自己用户名开头的“username.github.io”的公开仓库，其中username必须和GitHub注册时的用户名一致，否则无法使用Github page服务。 克隆仓库。进入到想要存储项目的文件夹，执行如下命令克隆仓库： git clone https://github.com/username/username.github.io.git 输入用户名、密码，完成克隆操作后，应该在文件夹生成“username.github.io”的子文件夹，之后个人站点的文件和操作都在该文件夹中完成。 创建首页。进入本地“username.github.io”文件夹，使用编辑器创建index.html，这个文件将是个人站点的首页。 提交代码到GitHub。完成页面编辑后，就可以发布代码到GitHub： git add --all git commit -m \"Initial commit\" git push -u origin master 如果是首次运行git工具，还要进行全局性用户名和邮箱的声明： git config --global user.email \"username@mail.com\" git config --global user.name \"username\" 上述操作完成后，本地仓库中的代码将推送到GitHub远程仓库。 浏览站点。启动浏览器，访问如下地址，即可浏览站点： http://username.github.io Git进阶 初学者可先不阅读这一节内容，在有需求的时候再深入学习。 如何为项目创建不同于全局性设置的用户信息 在有些情况下，我们创建的项目仓库，需要设置不同于全局性设置的用户信息，尤其是我们在不同的代码托管站点创建了多个仓库时，很有可能不同网站的用户信息是不一致的。怎样才能为不同仓库设置不同的用户信息，而不使用同一全局性信息呢？ 想使用全局配置或是某个项目需要单独配置 user.name 和 user.email： git config user.name \"xxx\" git config user.email \"xxx@163.com\" 查看Git配置信息，包括全局配置和项目当前配置，二者都有的情况下，Git优先使用项目当前配置： git config --list 如何清除git缓存 当我们修改了仓库密码时，由于git会缓存之前的密码，可能会出现授权错误，这是可以运行 git credential-cache exit 来清除缓存。 忽略项目中的特定文件 在项目中，总会有一些特定的文件不想采用Git工具进行版本的控制，如临时文件、编译时产生的过渡文件或包含帐号信息的文件，对于这类文件，Git提供了一个非常高效灵活的方式进行屏蔽，即创建一个.gitignore文件。 开发者还可通过https://www.gitignore.io/工具生成合适的.gitignore文件。 在这个文件中，项目拥有者只需将不想进入版本仓库的文件列举出来即可，支持通配符。例如： *.sublime-project *.sublime-workspace *.bak *.dump .gz(busy) test/* 需要提醒的是，当.gitignore文件更改后，并不能立即起效，需要进行如下操作： 清除缓存。命令为：git rm -r --cached . 添加文件到仓库。git add . 之后就可添加说明、推送。 彻底删除仓库中的文件 有时候我们能从版本库中永久删除文件（如可执行文件、存有密码的文件等等），不留痕迹，不仅要让它在版本历史里看不出来，还要把它占用的空间也释放出来。执行如下操作： git filter-branch --tree-filter 'rm -rf 要删除文件的完整路径' --tag-name-filter cat -- --all git push origin --tags --force git push origin --all --force rm -rf .git/refs/original/ git reflog expire --expire=now --all git gc --prune=now git gc --aggressive --prune=now du -hs 注意，filter-branch操作中，文件路径必须正确，负责会出现unchanged的错误信息。 51. https://github.com/torvalds/linux，由大神Linux Torvalds管理。> ↩ By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"Sublime.html":{"url":"Sublime.html","title":"Sublime Text编辑器的使用","keywords":"","body":"Sublime Text 编辑器的使用 工欲善其事，必先利其器。 节选自——孔子《论语·卫灵公》 为什么选择 Sublime Text 编辑器 作为开发人员，选择一款理想的文本编辑器，有助于工作效率的提高。实际上，有很多出色的文本编辑器供我们选择，比如Vim、Emacs、WebStorm、Dreamweaver、Notepad++、Sublime Text等等。我们之所以选择Sublime Text编辑器作为开发工具，主要是基于如下优点： 学习成本低 Vim和Emacs虽然功能强大，但其具有较为陡峭的学习曲线，而Sublime Text作为一款现代编辑器，更注重用户体验，基本做到了“开箱即用”。 跨平台 Sublime Text均为跨平台编辑器（在Linux、OS X和Windows下均可使用）。为了减少重复学习，使用一个跨平台的编辑器是很有必要的。 界面优美 与大多数编辑器只注重满足功能性需求不同，Sublime Text编辑器的界面非常简洁，尤其是选择免打扰模式后，开发人员可集中注意力于工作本身，不被系统中的其他软件信息干扰。还有，其特有的文件迷你地图可让编辑人员直观地了解到自己在文本中的位置。 免费 与商业软件WebStorm、Dreamweaver相比，Sublime Text编辑器可免费使用。Sublime Text虽然不是开源免费软件，但可免费使用全部功能，只是偶尔会在保存文件时提示购买信息。 轻便快速 Sublime Text编辑器安装包非常小，只有区区几兆（而其它的商业开发工具往往在1G左右，非常笨重），甚至可以放在U盘中使用；还有，在Sublime Text中，可使用“转到任何”功能，快捷键为Ctrl+ p实现文件的快速打开和跳转，提高工作效率；另外，Sublime Text编辑器打开文件时速度很快，尤其是文件比较大时。 扩展性良好 Sublime Text编辑器吸收了其它编辑器的优点，用户可对其进行定制和扩展，因此，涌现出能各种需求的扩展程序包，正是这些扩展程序包，使得Sublime Text编辑器和其它编辑器相比有了更多的吸引力。除由他人开发的控制包外，开发人员还可以自定义代码段，能够按照自己的需求自动完成代码，可大大提高编写效率。 生态系统完善 不同于其他编辑器需要用户自行寻找、自行安装扩展包的方式，Sublime Text编辑器的扩展包都统一在一个入口中，这使得用户能够非常方便地获取和更新扩展包，围绕着特定功能往往有多个扩展包可供选择，在https://packagecontrol.io/网站，用户可以通过对众多用户行为（使用、安装、卸载）的统计来对扩展包做出选择，借助于统一公开的插件入口和大多数人做出的选择，使得扩展包的开发存在着有序竞争，保障了Sublime Text编辑器的活力。 安装与配置 从Sublime Text官方网站选择合适的安装版本，安装后需要进行必要的配置才能更高效地使用Sublime Text。 设置字体 字体的选择，看起来无关紧要，但如果字体不合适，会给开发工作带来不必要的麻烦。字体的选择，第一个原则是近似字符的区分要清晰，比如K和k，`和'。字体选择的另外一个因素就是中文支持。结合这两点，建议选择Consolas或者Ubuntu Mono字体。选择菜单“首选项 → 设置-用户”，打开用户配置文件，加入字体配置： \"font_face\": \"Ubuntu Mono\", 设置缩进 打开用户配置文件，设置缩进： \"tab_size\": 4, \"translate_tabs_to_spaces\": true, \"expand_tabs_on_save\": true, 前两行表示所有自动缩进和tab键都是使用4个空格进行，最后一样是自动转换tab为空格缩进，这样代码就可以实现跨平台保持格式不变。 设置换行格式 \"default_line_ending\": \"unix\", \"ensure_newline_at_eof_on_save\": true, 为确保文件在不同系统中都能正常打开，建议将行结束符设置为unix格式。 安装Package Control Package Control是一个非常方便的扩展包管理扩展，在最新版中，安装入口已集成在软件中，点击安装即可。 安装中文语言包 安装好Package Control后，就可以方便的安装、卸载、浏览Sublime Text的扩展包，我们先安装Sublime Text的中文语言包，具体步骤如下： 选择 “Preference → Package Control → Install Package”，在对话框中键入Chinese，选择Chinese Localizition扩展包； Package Control会自动从网站下载并安装Chinese Localizition扩展包，安装完成后即可看到中文菜单。 常用组件 以下介绍一些常用、必要的扩展包： IMESupport 解决Sublime Text中使用中文输入法时的光标跟随问题。 Alignment 按照“=”对齐多行，使代码显得更加整洁、可读性更强。 DocBlockr 非常便利的函数功能注释生成扩展，支持Javascript, PHP, CoffeeScript, Actionscript, C , C++ 等等。 Emmet 快速生成HTML、CSS代码的扩展包。该扩展包在书写HTML、CSS代码时可通过缩写提高效率，具体使用方法参见http://docs.emmet.io/。 FTPsync 使用ftp方式同步本地代码与远程代码。 HTML-CSS-JS Prettify 使用node.js（需要单独安装node.js）美化HTML, CSS, JavaScript 和 JSON 代码。 Auto​PEP8 Python 语言自动排版美化插件。 Meterial Theme 一个漂亮有质感的界面。 Terminal 直接在编辑器中打开终端，并切换到项目目录，默认快捷键为super+shift+t。 StandardSnippets JavaScript 代码补全，符合standardjs code style。 常用快捷键 以下为常用功能对应的快捷键（Windows平台和Mac平台有细微差异）,快捷键的使用是提高工作效率的关键，能用快捷键实现的功能，就不要点击鼠标，随着对编辑器的熟悉，这些快捷键就会慢慢掌握： Ctrl+Shift+D 复制当前行 Ctrl+Shift+K 删除行 Ctrl+K，Ctrl+K 删除到行末 Ctrl+/ 添加或取消注释 Ctrl+J 连接行 Ctrl+Enter 插入空行到下一行 Ctrl+Shift+Enter 插入空行到上一行 Alt+- 返回上次编辑点 Alt+Shift+- 跳转到编辑点 Ctrl+Shift+G 为当前内容添加起始和结束标签 Ctrl+alt+up 与上一行交换顺序 Ctrl+alt+l 进入多行编辑模式 Ctrl+] 增加缩进 Ctrl+[ 删除缩进 常见问题 如何自定义代码片段 对经常重复使用的代码片段，我们可以通过sublime text提供的自定义代码片段功能(snippet)来提高效率。 激活定制命令。依次点击菜单：“工具 → 插件开发 → 新建代码片段…”，出现代码片段窗口； 输入代码片段。将和 ]]> 中的内容替换为想要反复使用的代码片段，在其中可以通过$1和$2之类的变量，设置跳转点和变量内容； 设置触发命令。取消这一行的注释，将触发内容（即输入什么内容后按tab键）写入之中； 设置触发命令有效范围。取消这一行的注释，在其中写入snippet的作用范围，即在什么类型的文档中才会触发。文档类型的值，可以在对应的文档中，按Control+Alt+P来获得。如md文档的值为text.html.markdown，多个文档类型之间可以通过逗号隔开。 存储snippet。将文档保存到Sublime Text 3/Packages/user目录中（该目录可以通过菜单“首选项 → 浏览插件目录”打开）。后缀名必须为.sublime-snippet。 存储后，该snippet会立即生效。 如何使用快速跳转功能 当项目文件数量众多时，查找文件的特定部分就变得低效且繁琐，针对这一问题，Sublime Text 提供了快速跳转命令（Go Anything，快捷键为Ctrl+P）解决方案。该功能在打开文件夹的情况下，才能正常使用，否则，只能在已经打开的文件中进行跳转。如： 使用Ctrl+P打开快速查找对话框后，输入wista/index.html，就会打开wista文件夹中的index.html文件。 在快速查找对话框输入@body，可以快速定位到当前文件的body标签。 在快速查找对话框输入输入:8，则跳转到第8行。 如何为特定功能设置快捷键 Sublime Text中可为任何命令绑定快捷键，这也是它能吸引用户的特性之一。 a. 打开控制台，输入如下内容，以便查看命令名称（当然，如果你知道准确的命令名称的话，就可跳过这一步骤）： sublime.log_commands(True) 比如，我们要为切换状态栏显示状态设定快捷键，可通过刚才的设定，看到其命令为：toggle_status_bar。 b. 点击菜单“首选项 → 按键绑定--用户”，打开快捷键配置文件，将控制台反馈的命令按照自己的习惯设定快捷键即可： [ { \"keys\": [\"ctrl+k\", \"ctrl+b\"], \"command\": \"toggle_status_bar\" }, ] 通过刚才的设定，当我们按下快捷键Ctrl+K后再按Ctrl+B就可以显示或隐藏状态栏。 如何格式化vue文件 Vue的组件后缀名为.vue，内容是html、css与js代码，使用HTML/CSS/JS Prettify 这个插件就行， 安装后 tools->HTML/CSS/JS Prettify->set prettify preference 在\"allowed_file_extensions\": [\"htm\", \"html\", \"xhtml\", \"shtml\", \"xml\", \"svg\",\"vue\"]加上vue即可。 如何在Mac终端中启动 ln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin Sublime text 无法安装插件的解决办法 Sublime text 编辑器有时会出现能显示插件，但是选择插件后没有任何反应的现象，解决方法如下： 打开设置中的自定义设置信息，将其中的\"0_package_control_loader\"删除即可。 { \"ignored_packages\": [ \"0_package_control_loader\", \"ASP\", \"Vintage\" ] } 学习资源 Sublime Text 非官方详细文档 Sublime Text 官方论坛 Sublime Text 官方文档 慕课网——前端开发工具技巧介绍—Sublime篇 慕课网——快乐的sublime编辑器 By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"Vscode.html":{"url":"Vscode.html","title":"Visual Studio Code编辑器的使用","keywords":"","body":"Visual Studio Code 编辑器的使用 VS Code的优势 方便的插件安装及管理 与Sublime Text（以下简称ST）编辑器相比，Visual Studio Code（以下简称VS Code）的主要优势在于插件安装的便利性，虽然在速度、内存占用等方面略输ST编辑器，但由于其是微软公司主导开发的开源软件，在生态建设方面、开发速度、更新速度等方面要好于由个人主导开发的ST编辑器，尤其是在插件商店安装的体验要好于ST编辑器。 在ST中，插件的安装需要用户自行搜索添加，而VS Code除了可自行搜索添加外，还可根据打开的文件类型增推荐相关插件，并且插件的安装也非常简单，点击安装即可。 内置功能众多 与ST只提供基础编辑功能相比，VSCode内置了很多功能，比如emmet、格式化代码、git等等，使得其更容易被初学者接受。 VS Code安装 安装VSCode非常简单，从官方网站下载合适的安装包即可，VSCode目前支持Windows、linux和Mac系统。 使用简介 如何更改编辑器主题 打开命令面板，搜索theme，选择颜色主题，再选择合适的编辑器主题即可。 如何自定义代码片段 在VSCode中自定义代码片段和ST非常类似，选择首选项->打开用户代码段，然后选择对应的语言即可创建自定义代码片段，在VSCode中代码片段使用JSON格式定义。 如何自定义快捷键 VSCode快捷键的定义，类似于ST，使用JSON格式，打开首选项->打开键盘快捷方式，支持直接设定快捷键，也支持通过Keybindings.json自定义快捷键，以下是自定义示例： [ { \"key\": \"cmd+shift+l\", \"command\": \"editor.action.insertCursorAtEndOfEachLineSelected\", \"when\": \"editorTextFocus\" }, ] 如何进行多点编辑 进入多点编辑模式有多种方式， 通过键盘或鼠标选择多行文字后，选择在行尾添加光标进入多点编辑模式。 用户配置文件及插件的云端保存及同步 用户配置文件可存储在云端，这样可在不同机器实现统一配置，具体可通过插件Settings Sync实现。该插件的使用需要Github账号。 常用快捷键 VSCode快捷键和ST类似，并且大多数功能的都可以设置快捷键，常用快捷键如下： 打开命令面板 shift+command+p 打开终端面板 command+~ 打开插件面板 shift+command+x 打开关闭侧边栏 command+b 底部信息栏 command+j 配置文件 以下是我的用户配置文件示例： { // 以像素为单位控制字号。 \"editor.fontSize\": 16, \"workbench.colorTheme\": \"Solarized Light\", // 保存时设置文件的格式。格式化程序必须可用，不能自动保存文件，并且不能关闭编辑器。 \"editor.formatOnSave\": true, \"workbench.startupEditor\": \"newUntitledFile\", // 启用后，保存文件时在文件末尾插入一个最终新行。 \"files.insertFinalNewline\": true, // 启用后，保存文件时将删除在最终新行后的所有新行。 \"files.trimFinalNewlines\": true, // 控制是否显示 minimap \"editor.minimap.enabled\": false, } 实用插件 markdownlint，Markdown语法检查及风格提示插件； Snippetica for Markdown，Markdown snippet，减少书写Markdown文件时键入量； Live Server，新建一个可以实时刷新的本地服务器，大大减少开发者的重复性动作，文件修改后，就可在页面中看到更新后的效果； ESLint，功能强大的js语法提示工具，减少js代码调试成本； phpcs, 按照PSR规则进行语法提示，需要安装pear及CodeSniffer，并进行php.ini配置。 php cs fixer, 按照PSR规则或自定义规则自动进行PHP文档规范化，比phpfmt更符合psr规范，但无法自动对齐。 better align，自动对齐，需要设置快捷键。 By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"virtualmachine.html":{"url":"virtualmachine.html","title":"虚拟机","keywords":"","body":"虚拟机 为什么要用虚拟机 运行网站、app的真实主机，操作系统大多为linux，而我们开发环境却大多为windows和mac，这样会出现程序在本地运行和在远程主机上运行存在差异的问题，因此有必要在本地模拟远端主机的真实环境，以便减少开发过程中由于运行环境不一致而产生的运行错误问题。 虚拟机可用来安全测试，系统部署，网络测试等，本来需要很多台电脑完成的事情，现在直接在一台或多台物理主机连接的虚拟机网络中就可以完成。 可以在本地电脑中，创建不同开发环境，而互相不影响，如我们可以创建PHP、nodejs、python不同版本的运行环境。 虚拟机使用最佳实践 传统使用虚拟机的方式是安装虚拟机软件，然后再在虚拟机中安装操作系统和必要软件，这种方式比较繁琐。使用vagrant虚拟机管理工具，可大大提高使用虚拟机的效率。 安装virtualbox mac用户可利用Homebrew进行安装： brew cask install virtualbox 安装vagrant Mac用户利用Homebrew进行安装： brew cask install vagrant 查看已安装box vagrant可以查看本地可用的box（即虚拟镜像），使用如下命令： vagrant box list 如果没有box，则会显示： There are no installed boxes! Use `vagrant box add` to add some. 安装box vagrant默认安装box的方式为： vagrant box add xx/xxx 其中xx/xxx 就是box的名字，如果要使用vagrant提供的box，可从vagrantcloud站点进行搜索和下载。由于vagrant默认安装方式时的包存放在国外，直接下载速度可能很慢，因此我们可以先使用迅雷等下载工具，将其下载到本地后，在添加到vagrant系统中，例如： vagrant box add centos/7 centos7.box 上述命令将当前目录中的centos7.box加载到vagrant管理工具中，并将其命名为centos/7。 为项目创建虚拟机 初始化 有了box之后，我们可以将其应用到项目开发中，在项目文件夹中运行如下命令，即可创建虚拟机： vagrant init centos/7 上述操作会在当前目录中创建vagrantfile文件，这是vagrant工具的配置文件，使用文本编辑器打开这个文件后，将其中的私有网络注释去掉，这样主机和虚拟机之间就可以使用私有网络进行交互： config.vm.network \"private_network\", ip: \"192.168.33.10\" 设置共享目录 默认情况下，vagrant会共享我们的项目目录，在项目的虚拟机里面，会有一个跟我们的项目的目录是同步的。但在某些情况下，这个默认共享目录无法使用。我们需要手工设置同步目录： 先安装 vbguest 插件，用它可以为虚拟机安装 vbguest： vagrant plugin install vbguest 然后创建项目目录，初始化虚拟机。 mkdir centos-7 cd centos-7 vagrant init centos/7 编辑配置文件，常用设置如下： # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(\"2\") do |config| config.vm.box = \"centos/7\" config.vm.network \"private_network\", ip: \"192.168.33.10\" config.vm.synced_folder \"../data\", \"/www/wwwroot\", create:true config.vm.synced_folder \".\", \"/vagrant\", disabled: true config.vm.provider \"virtualbox\" do |vb| vb.memory = \"2048\" end end 之后启动虚拟机： vagrant up 先忽略启动错误信息，登录到虚拟机后更新、重启： vagrant ssh sudo yum -y install kernel kernel-devel sudo yum update vagrant reload 至此，虚拟机与主机之间的共享目录可正常工作了。 启动虚拟机 vagrant up 查看虚拟机状态 vagrant status 连接到虚拟机 vagrant ssh 连接到虚拟机后，用户可以安装必要的软件，进行服务器端的配置。如果想退出连接，执行exit命令即可。 虚拟机操作 命令 效果 vagrant suspend 保存虚拟机状态到硬盘 vagrant halt 关闭虚拟机 vagrant reload 重启虚拟机 vagrant resume 激活挂起的虚拟机 vagrant destroy 销毁当前项目创建的虚拟机 如何创建自己的虚拟机镜像包 清理一些文件 使用ssh登录到虚拟机，然后清理如下文件，这个文件不清除，这个 box 的项目在配置好网络的时候启动以后会遇到问题。 sudo rm -rf /etc/udev/rules.d/70-persistent-net.rules 打包box vagrant package 该命令会在当前目录生成一个叫package.box的文件。 扩展阅读资料 https://www.vagrantup.com/intro/getting-started/index.html By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"linux.html":{"url":"linux.html","title":"Linux操作系统","keywords":"","body":"Linux 操作系统 Linux 简介 Linux是一个多用户多任务的自由和开放源代码的类UNIX操作系统。该操作系统的内核由Linus Torvalds在1991年10月5日首次发布。在加上一些应用程序之后，成为Linux操作系统，其主要大量运行在网络服务器上。绝大多数服务器选择Linux系列发行版作为操作系统，这样做的优势有二：一是安全稳定，二是免费。 严格来说，Linux不算是一个操作系统，是Linux系统中的内核，即与组成计算机的各种硬件（如CPU、内存、硬盘、键盘、网卡等等）进行通讯的平台。Linux操作系统的全称是GNU/Linux，GNU是Richard Stallman组织的自由软件项目，基于GNU发展出众多自由、开源软件，Linux就是其中的典型代表，基于GNU和Linux，又发展出了众多Linux发行版，如Redhat、Ubuntu、CentOS等等，所谓发行版，可以理解为针对特定目的（如个人桌面应用）基于Linux内核，集成必要软件（如浏览器、办公软件、电子邮件等等）的软件包，其中CentOS就是专门针对网络服务器的Linux发行版。 下面我们就以CentOS作为主要学习的操作系统。 CentOS的安装 服务器端，我们通常可以选择云主机服务商提供的镜像，非常方便地安装。而在本地电脑中，大多数情况下操作系统为windows或mac，因此建议通过虚拟机技术搭设CentOS开发环境，如使用Vagrant进行虚拟机的管理。 登录到服务器 登录到远程服务器，windows用户可以通过putty，mac用户可以在终端中使用ssh命令。 ssh root@10.10.2.2 //ssh 用户名@主机ip地址 登录到本地虚拟机，如果使用vagrant作为虚拟机管理工具的话，则使用如下命令即可登录： vagrant ssh 用户管理 在Linux中，有三种用户： root用户，也称为超级用户，对系统拥有完全的控制权限。 系统用户，系统用户是Linux运行某些程序所必须的用户，如mail用户、sshd用户等。 普通用户，普通用户对系统文件的访问受限，不能执行某些命令。 用户组，就是具有相同特征的用户的集合。一个组可以包含多个用户，每个用户也可以属于不同的组。 与用户和组有关的系统文件 /etc/passwd 保存用户名和密码等信息。这个文件对所有用户都是可读的。 /etc/group 保存用户组的所有信息。 其中/etc/passwd文件的结构如下： root :* :0 :0 :System Administrator :/var/root :/bin/sh vagrant:x :1000 :1000 :vagrant :/home/vagrant:/bin/bash 用户名 :密码:用户id :组id :描述信息 :用户主目录 :用户shell 用户id有以下几种： 0 代表系统管理员。 1-500 是系统预留id。 500 以上是普通用户。 查看登录到系统的用户 可以使用users、who和w命令来查看登录到系统的用户： [vagrant@localhost ~]$ users vagrant [vagrant@localhost ~]$ who vagrant pts/0 May 29 08:28 (10.0.2.2) [vagrant@localhost ~]$ w 08:29:24 up 20 min, 1 user, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT vagrant pts/0 10.0.2.2 08:28 4.00s 0.02s 0.00s w 另外，使用whoami可以查看当前用户名称： [vagrant@localhost ~]$ whoami vagrant 管理用户和组 命令 描述 useradd 添加用户 passwd 更改用户密码 uermode 修改用户信息 userdel 删除用户 groupadd 添加用户组 groupmod 修改用户组信息 groupdel 删除用户组 常用命令 参见命令行章节内容。 文件管理 文件类型 Linux中的所有数据都保存在文件中，所有的文件有被分配到不同的目录中，目录是一种类似于树结构的文件系统。在Linux中，有三种基本的文件类型： 普通文件 目录，目录也是一个文件，它的唯一功能就是保存文件及其相关信息。 设备文件，Linux将外部设备视为一个文件，输入输出到外部设备的方式和输入输出到一个文件的方式是相同的。 隐藏文件 在Linux中，隐藏文件的第一个字符为英文点.，隐藏文件通常用来保存配置信息。 目录 Linux目录有清晰的层级结构，\\表示根目录，所有的文件和目录都位于根目录之下。 用户登录到Linux后，所在的位置是主目录，用~表示。 文件权限和访问模式 文件权限 文件权限是Linux系统的第一道安全防线，基本的权限有读取r、写入w和执行x。Linux系统为不同文件赋予不同权限，每个文件都可设定三类权限： 所有者权限 用户组权限 其他用户权限 查看权限 使用ls -l命令可以查看文件权限信息： ~/document/works/www/appendix />ls -l total 184 -rw-r--r-- 1 ncsxbmu staff 146 5 28 12:13 FOOTER.md -rw-r--r-- 1 ncsxbmu staff 9149 5 28 12:13 Howtolearn.md -rw-r--r-- 1 ncsxbmu staff 424 5 28 12:13 README.md 其中-rw-r--r--中的-表示当前文件为普通文件，后面的字符每三个为一组，分别表示所有者权限、用户组权限和其他用户权限。例如： rw- 表示所有者ncsxbmu拥有读取r和写入w权限，但是没有执行x权限； r-- 表示所有者ncsxbmu所在的用户组staff拥有读取权限，但是没有写入和执行权限； rw- 表示其他用户拥有读取权限，但没有写入和执行权限； 改变权限 chmod命令来改变文件的访问权限，可以使用+、-、=设定特定权限： ~/document/works/www/appendix />ls -l book.json -rw-r--r-- 1 ncsxbmu staff 2182 5 28 12:13 book.json ~/document/works/www/appendix />chmod g=rwx book.json ~/document/works/www/appendix />ls -l book.json -rw-rwxr-- 1 ncsxbmu staff 2182 5 28 12:13 book.json 符号 说明 + 为文件增加权限 - 删除文件权限 = 设定特定权限 u 代表文件拥有者 g 代表用户组 o 代表其他用户 a 代表所有用户 除了符号，还可以使用八进制数字来设定具体权限，如下表： 数字 说明 权限 0 没有任何权限 --- 1 执行权限 --x 2 写入权限 -w- 3 写入执行 -wx 4 读取权限 r-- 5 读取执行 r-x 6 读取写入 rw- 7 所有权限 rwx 例如： chmod 755 filename 上述命令将设置文件拥有者拥有全部权限，所在用户组及其他用户拥有读取和执行的权限。常用的权限设置还有有777、644。 更改所有者和用户组 在Linux中，所有用户都有用户名和群组，所有文件都有拥有者和群组。可以通过chown和chgrp来改变文件拥有者和所属群组。超级用户root可以不受限制地更改文件所有者和用户组，但是普通用户只能更改所有者是自己的文件。 chown user filelist chgrp user filelist Linux环境变量 在Linux中，环境变量是一个很重要的概念，环境变量可以由系统、用户、shell以及其他程序来设定。变量就是一个被复制的字符串。登录系统后，shell会有一个初始化的过程，shell会读取/etc/profile和/~/.profile两个文件中的设置信息。 在主目录下的.profile文件，用户可以修改并增加一些个性化的初始化信息。 管道和过滤器 管道是Linux进程之间一种重要的通讯机制，除了管道，还有共享内存、消息队列、信号、套接字等进程通讯机制。使用管道，我们可以将一个命令的输出作为另一个命令的输入，使用|可以建立管道。另外，能够接受数据，过滤后再输出的工具，称为过滤器，常用过滤器命令有grep和sort、more。 例如： ~ />php -i | grep gzip gzip compression => enabled 上述命令将php输出的大量信息进行筛选，只显示和gzip相关的信息。这种操作能大大提高信息查询的准确程度和速度。 再比如： ~ />ls -l | grep 2017 | sort +5n drwx------+ 8 ncsxbmu staff 256 3 3 2017 Pictures drwxr-xr-x 4 ncsxbmu staff 128 5 22 2017 GitBook drwx------+ 6 ncsxbmu staff 192 10 21 2017 Music 上述命令将列出当前目录中2017年的文件，并按照日期进行排序。 进程管理 当我们运行程序时，Linux会为程序创建一个特殊的环境，该环境包含程序运行需要的所有资源，以保证程序能够独立运行，不受其他程序的干扰。这个特殊的环境就称为进程。系统通过一个五位数字跟踪程序的运行状态，这个数字称为 pid 或进程ID，每个进程都拥有唯一的 pid。 每个 Linux 进程会包含两个进程ID：当前进程ID(pid)和父进程ID(ppid)。可以暂时认为所有的进程都有父进程。 进程有两种：前台进程和后台进程。 查看进程 使用ps命令可查看前台和后台进程： [vagrant@localhost ~]$ ps -f UID PID PPID C STIME TTY TIME CMD vagrant 2988 2987 0 08:28 pts/0 00:00:00 -bash vagrant 3047 2988 0 08:47 pts/0 00:00:00 ps -f 每列的含义如下： 名称 含义 UID 进程所属用户的ID PID 进程ID PPID 父进程ID C CPU使用率 STIME 进程开始时间 TTY 与进程有关的终端类型 TIME 进程所使用的CPU时间 CMD 创建进程所使用的命令 终止进程 前台进程可以通过kill或者ctrl+c终止，后台进程可以通过kill终止。 查看系统进程 top 命令是一个很有用的工具，它可以动态显示正在运行的进程，还可以按照指定条件对进程进行排序，与Windows的任务管理器类似。top 命令可以显示进程的很多信息，包括物理内存、虚拟内存、CPU使用率、平均负载以及繁忙的进程等。 top - 08:51:50 up 42 min, 1 user, load average: 0.00, 0.01, 0.05 Tasks: 87 total, 1 running, 86 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.0 us, 0.3 sy, 0.0 ni, 99.7 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 500076 total, 280092 free, 113416 used, 106568 buff/cache KiB Swap: 1572860 total, 1572860 free, 0 used. 357876 avail Mem 软件包管理工具yum CentOS中的软件和文档以所谓的“RPM”包的形式提供。一个软件包就是一个包含程序文件、图标、文档和管理脚本的压缩文档。软件管理程序使用这些信息安全地定位、安装、更新和移除软件。软件包还包含数字签名信息以证明其来源可靠，软件管理工具通过使用GPG验证这些数字签名信息。 Yum，是Yellow dog Updater Modified的简称，起初是由yellow dog这一发行版的开发者Terra Soft研发，用python写成，那时还叫做yup(yellow dog updater)，后经杜克大学的Linux@Duke开发团队进行改进，遂有此名。yum的宗旨是自动化地升级，安装/移除rpm包，收集rpm包的相关信息，检查依赖性并自动提示用户解决。yum的关键之处是要有可靠的repository，顾名思义，这是软件的仓库，它可以是http或ftp站点， 也可以是本地软件池。yum有以下特点： 可以同时配置多个资源库(Repository) 简洁的配置文件(/etc/yum.conf) 自动解决增加或删除rpm包时遇到的倚赖性问题 使用方便 保持与RPM数据库的一致性 安装 yum install 全部安装 yum install package1 安装指定的安装包package1 yum groupinsall group1 安装程序组group1 更新和升级 yum update 全部更新 yum update package1 更新指定程序包package1 yum check-update 检查可更新的程序 yum upgrade package1 升级指定程序包package1 yum groupupdate group1 升级程序组group1 查找和显示 yum info package1 显示安装包信息package1 yum list installed 列出所有已安装的软件包 yum list 显示所有已经安装和可以安装的程序包 yum list package1 显示指定程序包安装情况package1 yum groupinfo group1 显示程序组group1信息yum search string 根据关键字string查找安装包 删除程序 yum remove package1 删除程序包package1 yum groupremove group1 删除程序组group1 yum deplist package1 查看程序package1依赖情况 清除缓存 yum clean packages 清除缓存目录下的软件包 yum clean headers 清除缓存目录下的 headers yum clean oldheaders 清除缓存目录下旧的 headers yum clean, yum clean all (= yum clean packages; yum clean oldheaders) 清除缓存目录下的软件包及旧的headers By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "},"server.html":{"url":"server.html","title":"网站服务器搭建","keywords":"","body":"服务器搭建 我们这里所说的服务器是指运行在互联网上，提供特定服务（如www、ftp等等）的一台或一组计算机。随着信息技术的发展，网络服务器经历了自建、托管、虚拟主机到现在的云主机，相比之前，云主机具有一系列的优势，如自主安装操作系统、自主搭设软件环境，用户自由度很高。因此，对于网络应用开发者而言，非常有必要掌握一定的服务器运维知识。 服务器的搭建有两种思路，一种是自己根据需要选择安装合适、必要的软件包；另外一种是使用服务器面板，如宝塔面板、amh面板。第二种方式更加适合初学者，也是效率较高的一种选择。 创建CentOS虚拟机 使用虚拟机技术，创建centos/7虚拟机，启动虚拟机后，先使用yum进行更新，确保软件包保持最新状态。 虚拟机配置如下： Vagrant.configure(\"2\") do |config| config.vm.box = \"centos/7\" config.vm.network \"private_network\", ip: \"192.168.33.10\" config.vm.synced_folder \"../data\", \"/www/wwwroot\", create:true config.vm.synced_folder \".\", \"/vagrant\", disabled: true config.vm.provider \"virtualbox\" do |vb| vb.memory = \"2048\" end end sudo yum update 设置时区信息 sudo cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 安装必要的服务 添加IUS源 IUS只为RHEL和CentOS这两个发行版提供较新版本的rpm包。如果在os或epel找不到某个软件的新版rpm，软件官方又只提供源代码包的时候，可以来ius源中找，几乎都能找到。 sudo yum install https://centos7.iuscommunity.org/ius-release.rpm -y 安装nginx sudo yum install nginx -y 启动Nginx： sudo systemctl start nginx 然后让它开机自启动： sudo systemctl enable nginx 安装MariaDB CentOS原版中自带MariaDB，但版本较低，因此，我们先移除自带的版本较低的MariaDB，然后安装高版本的MariaDB，再启动MariaDB服务，并将其加入自启动，执行安装设置： sudo yum remove mariadb-libs -y sudo yum install mariadb101u-server -y sudo systemctl start mariadb sudo systemctl enable mariadb sudo mysql_secure_installation 安装PHP 安装PHP-fpm及常用扩展： sudo yum install php71u-fpm php71u-cli php71u-xml php71u-gd php71u-mysqlnd php71u-pdo php71u-mcrypt php71u-mbstring php71u-json -y 启动PHP服务，并将其加入自启动： sudo systemctl start php-fpm sudo systemctl enable php-fpm 配置Nginx信息 sudo vi /etc/nginx/conf.d/php.basic.conf 在这个配置文件中，写入如下信息： server { listen 80; server_name 192.168.33.10; root /vagrant_data/www; index index.php index.html; location / { try_files $uri $uri/ /index.php?$query_string; } location ~ \\.php$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } } 安装phpMyAdmin 在phpMyAdmin官方网站下载压缩包，解压到合适目录，依照提示，进行必要的设置。 安装nodejs vagrant ssh sudo wget https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz sudo xz -d node-v8.11.2-linux-x64.tar.xz sudo tar xvf node-v8.11.2-linux-x64.tar sudo rm node-v8.11.2-linux-x64.tar sudo mv node-v8.11.2-linux-x64 node sudo vim /etc/profile 在/etc/profile中加入如下信息： #set for nodejs export NODE_HOME=/usr/local/node export PATH=$NODE_HOME/bin:$PATH 重新登录shell，完成nodejs安装。 安装yarn curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo sudo yum install yarn 安装MongoDB CentOS中自带源中的MongoDB版本过低，因此，我们先添加自定义源： sudo vi /etc/yum.repos.d/mongodb-org-3.6.rep 在文件中添加如下内容： [mongodb-org-3.6] name=MongoDB Repository baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.6/x86_64/ gpgcheck=1 enabled=1 gpgkey=https://www.mongodb.org/static/pgp/server-3.6.asc 使用yum安装： sudo yum install -y mongodb-org 启动服务并将其加入到自启动服务： sudo systemctl start mongod sudo systemctl enable mongod 常见问题 sudo systemctl start mongod之后出错，有时可以通过重新安装MongoDB解决，如果重新安装后依然无法启动服务，最常见的原因是目录访问权限设置有问题，也可通过设置目录权限来排除错误。 使用宝塔面板快速搭建网站 宝塔面板是国内领先的服务器面板服务商，免费提供功能强大的服务器维护程序。在其官方网站运行在线安装脚本即可安装： yum install -y wget && wget -O install.sh http://download.bt.cn/install/install.sh && sh install.sh By yangzh，使用知识共享 署名-相同方式共享 4.0协议发布 "}}